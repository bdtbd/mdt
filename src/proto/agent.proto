import "sofa/pbrpc/rpc_option.proto";
package mdt.LogAgentService;

enum RpcResponseStatus {
    kRpcOk = 1;
    kRpcError = 2;
}

message EchoRequest {
    required string message = 1;
}
message EchoResponse {
    required string message = 1;
}

message RpcAddWatchPathRequest {
    optional string watch_path = 1; 
}

message RpcAddWatchPathResponse {
    optional RpcResponseStatus status = 1; 
}

message RpcAddWatchModuleStreamRequest {
    optional string production_name = 1;
    optional string log_name = 2;
}

message RpcAddWatchModuleStreamResponse {
    optional RpcResponseStatus status = 1; 
}

//////////////////////////////////////////
//  galaxy app log trace 
//////////////////////////////////////////
message RpcTraceGalaxyAppRequest {
    optional string pod_id = 1;
    optional string work_dir = 3; // /home/galaxy/agent/work_dir; full path = /home/galaxy/agent/work_dir/podid/podid+taskid/userlog dir 
    optional string user_log_dir = 4;
    optional string db_name = 5; // module name
    optional string table_name = 6; // log file name prefix
    
    optional int64 parse_path_fn = 10; // fn = 1; fn = 2: work_dir=ni, user_log_dir=full path;
}
message RpcTraceGalaxyAppResponse {
    optional RpcResponseStatus status = 1; 
}

//////////////////////////////////////////
//  pb log
//////////////////////////////////////////
message RpcStoreIndex {
    optional string index_table = 1;
    optional bytes key = 2;
}

message RpcStoreRequest {
    optional string db_name = 1;
    optional string table_name = 2; 
    optional string primary_key = 3;
    repeated RpcStoreIndex index_list = 4;
    optional uint64 timestamp = 5;
    optional bytes data = 6;
}

message RpcStoreResponse {
    optional RpcResponseStatus status = 1;
}

//////////////////////////////////////////
//  span log
//////////////////////////////////////////
message KVContext {
    optional bytes key = 1;
    optional bytes value = 2;
}

message FunctionAnnotation {
    optional uint64 timestamp = 2;
    //optional string function_name = 2; // service name or function name
    //optional bytes hardware_info = 3; // TODO: not support, user define
    //optional bytes software_info = 4; // TODO: not support, user define
    //optional bytes user_define_info = 5; // TODO: not support, user define
    optional string text_context = 6; // some readable annotation
    optional KVContext kv_context = 7; // KVContext list, use for machine analyse
}

// use for rpc invoke trace
message TraceIdentify {
    optional uint64 trace_id = 1;
    optional uint64 parent_span_id = 2;
    optional uint64 span_id = 3;
}

message FunctionSpan {
    optional TraceIdentify id = 1;
    optional string db_name = 3;
    optional string table_name = 5;
    repeated FunctionAnnotation annotations = 6; // FunctionAnnotation list
}

message RpcStoreSpanRequest {
    optional FunctionSpan span = 1;
}

message RpcStoreSpanResponse {
    optional RpcResponseStatus status = 1;
}

// rpc service
service LogAgentService {
    rpc Echo(EchoRequest) returns(EchoResponse);
    rpc RpcAddWatchPath(RpcAddWatchPathRequest) returns(RpcAddWatchPathResponse);
    rpc RpcAddWatchModuleStream(RpcAddWatchModuleStreamRequest) returns(RpcAddWatchModuleStreamResponse);
    rpc Store(RpcStoreRequest) returns(RpcStoreResponse);
    rpc RpcStoreSpan(RpcStoreSpanRequest) returns(RpcStoreSpanResponse);
    rpc RpcTraceGalaxyApp(RpcTraceGalaxyAppRequest) returns(RpcTraceGalaxyAppResponse);
}
option py_generic_services = true;
option cc_generic_services = true;

