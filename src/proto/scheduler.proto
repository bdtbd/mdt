import "sofa/pbrpc/rpc_option.proto";
package mdt.LogSchedulerService;

enum RpcResponseStatus {
    kRpcOk = 1;
    kRpcError = 2;
}

message EchoRequest {
    required string message = 1;
}
message EchoResponse {
    required string message = 1;
}

message CollectorInfo {
    optional int64 qps = 1;
    optional int64 max_packet_size = 2;
    optional int64 min_packet_size = 3;
    optional int64 average_packet_size = 4;
}

message RegisterNodeRequest {
    optional string server_addr = 1; // ip:port
    optional CollectorInfo info = 2;
}

message RegisterNodeResponse {
    optional int32 error_code = 1;
}

message AgentInfo {
    optional int64 qps_quota = 1;
    optional int64 qps_use = 2;
    optional int64 bandwidth_quota = 3;
    optional int64 bandwidth_use = 4;
    
    optional int64 max_packet_size = 5;
    optional int64 min_packet_size = 6;
    optional int64 average_packet_size = 7;

    optional int32 error_nr = 8;
}

message GetNodeListRequest {
    optional string agent_addr = 1; 
    optional string current_server_addr = 2; 
    optional AgentInfo info = 3;
}

message GetNodeListResponse {
    //repeated string server_list = 1;
    optional string primary_server_addr = 2;
}

message RpcAddAgentWatchPathRequest {
    optional string watch_path = 1;
    optional string agent_addr = 2;
}

message RpcAddAgentWatchPathResponse {
    optional RpcResponseStatus status = 1;
}

message RpcAddWatchModuleStreamRequest {
    optional string production_name = 1;
    optional string log_name = 2;
    optional string agent_addr = 3;
}

message RpcAddWatchModuleStreamResponse {
    optional RpcResponseStatus status = 1; 
}

///////////////////////////////////
//  galaxy app trace
///////////////////////////////////
message RpcTraceGalaxyAppRequest {
    optional string job_name = 1;
    optional string work_dir = 3; // /home/galaxy/agent/work_dir; full path = /home/galaxy/agent/work_dir/podid/podid+taskid/userlog dir 
    optional string user_log_dir = 4;
    optional string db_name = 5; // module name
    optional string table_name = 6; // log file name prefix
    
    // galaxy sdk relatively
    optional string nexus_root_path = 7; 
    optional string master_path = 8;
    optional string nexus_servers = 9;

    optional int64 parse_path_fn = 10; // fn = 1; fn = 2;
}
message RpcTraceGalaxyAppResponse {
    optional RpcResponseStatus status = 1; 
}

////////////////////////////////////
// agent & collector info show
////////////////////////////////////
message RpcShowAgentInfoRequest {
    optional int64 id = 1;
}

message AgentInformation {
    optional string agent_addr = 1;
    optional AgentInfo agent_info = 2;
    optional int64 ctime = 3;
    optional string collector_addr = 4;
    optional int64 agent_state = 5;
}

message RpcShowAgentInfoResponse {
    repeated AgentInformation info = 1;
}

message RpcShowCollectorInfoRequest {
    optional int64 id = 1;
}

message CollectorInformation {
    optional string collector_addr = 1;
    optional CollectorInfo collector_info = 2;
    optional int64 nr_agents = 3;
    optional int64 ctime = 4;
    optional int64 error_nr = 5;
    optional int64 collector_state = 6;
}

message RpcShowCollectorInfoResponse {
    repeated CollectorInformation info = 1;
}

// rpc service
service LogSchedulerService {
    rpc Echo(EchoRequest) returns(EchoResponse);
    rpc RegisterNode(RegisterNodeRequest) returns(RegisterNodeResponse);
    rpc GetNodeList(GetNodeListRequest) returns(GetNodeListResponse);
    rpc RpcAddAgentWatchPath(RpcAddAgentWatchPathRequest) returns(RpcAddAgentWatchPathResponse);
    rpc RpcAddWatchModuleStream(RpcAddWatchModuleStreamRequest) returns(RpcAddWatchModuleStreamResponse);
    rpc RpcShowAgentInfo(RpcShowAgentInfoRequest) returns(RpcShowAgentInfoResponse);
    rpc RpcShowCollectorInfo(RpcShowCollectorInfoRequest) returns(RpcShowCollectorInfoResponse);
    rpc RpcTraceGalaxyApp(RpcTraceGalaxyAppRequest) returns(RpcTraceGalaxyAppResponse);
}
option py_generic_services = true;
option cc_generic_services = true;


